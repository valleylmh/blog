(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{426:function(t,l,i){"use strict";i.r(l);var v=i(25),_=Object(v.a)({},(function(){var t=this,l=t.$createElement,i=t._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("从解决问题每一步的所有可能选项里系统选择出一个可行的解决方案。")]),t._v(" "),i("p",[t._v("在某一步选择一个选项后，进入下一步，然后面临新的选项。重复选择，直至达到最终状态。")]),t._v(" "),i("p",[t._v("回溯法解决的问题的所有选项可以用树状结构表示。")]),t._v(" "),i("ul",[i("li",[t._v("在某一步有n个可能的选项，该步骤可看作树中一个节点。")]),t._v(" "),i("li",[t._v("节点每个选项看成节点连线，到达它的n个子节点。")]),t._v(" "),i("li",[t._v("叶节点对应终结状态。")]),t._v(" "),i("li",[t._v("叶节点满足约束条件，则为一个可行的解决方案。")]),t._v(" "),i("li",[t._v("叶节点不满足约束条件，回溯到上一个节点，并尝试其他叶子节点。")]),t._v(" "),i("li",[t._v("节点所有子节点均不满足条件，再回溯到上一个节点。")]),t._v(" "),i("li",[t._v("所有状态均不能满足条件，问题无解。")])]),t._v(" "),i("p",[i("img",{attrs:{src:"https://i.loli.net/2019/08/19/GZkQ7gx9CHsb2hd.png",alt:""}})]),t._v(" "),i("blockquote",[i("p",[t._v("回溯算法适合由多个步骤组成的问题，并且每个步骤都有多个选项。")])]),t._v(" "),i("ul",[i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/二叉树中和为某一值的路径.html"}},[t._v("二叉树中和为某一值的路径")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/字符串的排列.html"}},[t._v("字符串的排列")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/和为sum的n个数.html"}},[t._v("和为sum的n个数")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/矩阵中的路径.html"}},[t._v("矩阵中的路径")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/机器人的运动范围.html"}},[t._v("机器人的运动范围")])],1),t._v(" "),i("li",[i("RouterLink",{attrs:{to:"/algorithm/回溯算法/N皇后问题.html"}},[t._v("N皇后问题")])],1)])])}),[],!1,null,null,null);l.default=_.exports}}]);