(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{463:function(t,r,a){"use strict";a.r(r);var e=a(25),v=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("树是用来模拟具有树状结构性质的数据集合。根据它的特性可以分为非常多的种类，对于我们来讲，掌握二叉树这种结构就足够了，它也是树最简单、应用最广泛的种类。")]),t._v(" "),a("blockquote",[a("p",[t._v("二叉树是一种典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/08/18/3HdPxIMFOQv9yEz.jpg",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"二叉树遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历"}},[t._v("#")]),t._v(" 二叉树遍历")]),t._v(" "),a("blockquote",[a("p",[t._v("重点中的重点，最好同时掌握递归和非递归版本，递归版本很容易书写，但是真正考察基本功的是非递归版本。")])]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的中序遍历.html"}},[t._v("二叉树的中序遍历")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的前序遍历.html"}},[t._v("二叉树的前序遍历")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的后序遍历.html"}},[t._v("二叉树的后序遍历")])],1)]),t._v(" "),a("blockquote",[a("p",[t._v("根据前序遍历和中序遍历的特点重建二叉树，逆向思维，很有意思的题目")])]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/重建二叉树.html"}},[t._v("重建二叉树")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/重建二叉树.html#题目2-求二叉树的遍历"}},[t._v("求二叉树的遍历")])],1)]),t._v(" "),a("h3",{attrs:{id:"二叉树的对称性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的对称性"}},[t._v("#")]),t._v(" 二叉树的对称性")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/对称的二叉树.html"}},[t._v("对称的二叉树")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的镜像.html"}},[t._v("二叉树的镜像")])],1)]),t._v(" "),a("h3",{attrs:{id:"二叉搜索树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),a("blockquote",[a("p",[t._v("二叉搜索树是特殊的二叉树，考察二叉搜索树的题目一般都是考察二叉搜索树的特性，所以掌握好它的特性很重要。")])]),t._v(" "),a("ol",[a("li",[t._v("若任意节点的左⼦子树不不空，则左⼦子树上所有结点的值均⼩小于它的 根结点的值;")]),t._v(" "),a("li",[t._v("若任意节点的右⼦子树不不空，则右⼦子树上所有结点的值均⼤大于它的 根结点的值;")]),t._v(" "),a("li",[t._v("任意节点的左、右⼦子树也分别为⼆二叉查找树。")])]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉搜索树的第k个节点.html#题目"}},[t._v("二叉搜索树的第k个节点")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉搜索树的后序遍历.html"}},[t._v("二叉搜索树的后序遍历")])],1)]),t._v(" "),a("h3",{attrs:{id:"二叉树的深度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的深度"}},[t._v("#")]),t._v(" 二叉树的深度")]),t._v(" "),a("blockquote",[a("p",[t._v("二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("平衡二叉树：左右子树深度之差大于1")])]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的最大深度.html"}},[t._v("二叉树的最大深度")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/二叉树的最小深度.html#考察点"}},[t._v("二叉树的最小深度")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/dataStructure/二叉树/平衡二叉树.html"}},[t._v("平衡二叉树")])],1)])])}),[],!1,null,null,null);r.default=v.exports}}]);