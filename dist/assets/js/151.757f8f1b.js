(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{556:function(v,_,e){"use strict";e.r(_);var t=e(25),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("名言警句")]),v._v(" "),e("p",[v._v("学会输出就是事半功倍学习")])]),v._v(" "),e("h1",{attrs:{id:"node-js是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js是什么"}},[v._v("#")]),v._v(" Node.js是什么？")]),v._v(" "),e("p",[v._v("Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。Node.js由Node.js基金会持有和维护，并与Linux基金会有合作关系。Node.js采用Google开发的V8运行代码，使用"),e("strong",[v._v("事件驱动、非阻塞异步I/O")]),v._v("等技术来提高性能，可优化应用程序的传输量和规模。这些技术通常用于数据密集的即时应用程序。")]),v._v(" "),e("blockquote",[e("p",[e("em",[v._v("Node不是一门语言，也不是一个框架，是基于Chrome V8引擎的JavaScript运行时环境；同时结合libuv扩展了JavaScript的功能，使得JavaScript能够支持浏览器DOM的操作，同时具有了后端语言才有的I/O，文件读写和操作数据库的能力，是目前最简单的全栈环境。")])])]),v._v(" "),e("h2",{attrs:{id:"node-js特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js特点"}},[v._v("#")]),v._v(" Node.js特点")]),v._v(" "),e("h3",{attrs:{id:"_1-适合构建web应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-适合构建web应用"}},[v._v("#")]),v._v(" 1. 适合构建WEB应用")]),v._v(" "),e("p",[v._v("构建网站、构建API网关、构建RPC通信BFF层、前后端分离以及适用于火热的Serverless。")]),v._v(" "),e("p",[v._v("###2. 高性能")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("执行速度开")]),v._v(" 构建在优秀的V8引擎上，执行速度在动态语言中算最快的")]),v._v(" "),e("li",[e("code",[v._v("天生异步")]),v._v(" "),e("em",[v._v("事件驱动和非阻塞I/O")]),v._v(" 特性决定了必须要采用异步的方式，实际上每个I/O都是异步的，因此集成到libuv中才会让开发者感觉不到并发的存在。\n###3. 简单和可扩展")]),v._v(" "),e("li",[v._v("语法简单，并发编程简单，部署运维简单，开发简单，可以使用大量的"),e("code",[v._v("npm")]),v._v("模块，也可以通过编写"),e("code",[v._v("C++")]),v._v("实现"),e("code",[v._v("CPU")]),v._v("密集型任务")])]),v._v(" "),e("h1",{attrs:{id:"node-js事件循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js事件循环"}},[v._v("#")]),v._v(" Node.js事件循环")]),v._v(" "),e("p",[v._v("详细的介绍"),e("code",[v._v("Event Loop")]),v._v("之前我们先来说明一下通常的一个概念混淆："),e("em",[v._v("事件循环和事件驱动")]),v._v("，经常有刚开始的小伙伴会混淆这两个概念，我们上一节已经说过，"),e("code",[v._v("libuv")]),v._v("这个库提供两个最重要的东西是事件循环和线程池，两者共同构建了异步非阻塞I/O模型，而事件驱动只是在整个非阻塞I/O模型当中线程池通知事件循环它已经完成I/O操作的这样一种机制而已。")]),v._v(" "),e("h2",{attrs:{id:"六个阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六个阶段"}},[v._v("#")]),v._v(" 六个阶段")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3061147-3c5029f1f620d7df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),v._v(" "),e("ul",[e("li",[e("code",[v._v("timers 阶段")]),v._v("：这个阶段执行timer（setTimeout、setInterval）的回调")]),v._v(" "),e("li",[e("code",[v._v("I/O callbacks 阶段")]),v._v(" ：处理一些上一轮循环中的少数未执行的 I/O 回调")]),v._v(" "),e("li",[e("code",[v._v("idle, prepare 阶段")]),v._v(" ：仅node内部使用")]),v._v(" "),e("li",[e("code",[v._v("poll 阶段")]),v._v(" ：获取新的I/O事件, 适当的条件下node将阻塞在这里")]),v._v(" "),e("li",[e("code",[v._v("check 阶段")]),v._v(" ：执行 setImmediate() 的回调")]),v._v(" "),e("li",[e("code",[v._v("close callbacks 阶段")]),v._v("：执行 socket 的 close 事件回调")])]),v._v(" "),e("blockquote",[e("p",[v._v("每个阶段都有一个先入先出的（FIFO）的用于执行回调的队列，事件循环运行到每个阶段，都会从对应的回调队列中取出回调函数去执行，直到队列当中的内容耗尽，或者执行的回调数量达到了最大。然后事件循环就会进入下一个阶段，然后又从下一个阶段对应的队列中取出回调函数执行，这样反复直到事件循环的最后一个阶段。而事件循环也会一个一个按照循环执行，直到进程结束。")])]),v._v(" "),e("p",[e("code",[v._v("注意：上面六个阶段都不包括 process.nextTick()")])]),v._v(" "),e("h2",{attrs:{id:"micro-task-与-macro-task"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#micro-task-与-macro-task"}},[v._v("#")]),v._v(" Micro-Task 与 Macro-Task")]),v._v(" "),e("p",[v._v("Node端事件循环中的异步队列也是这两种："),e("code",[v._v("macro")]),v._v("（宏任务）队列和 "),e("code",[v._v("micro")]),v._v("（微任务）队列。")]),v._v(" "),e("ul",[e("li",[v._v("常见的macro-task："),e("code",[v._v("setTimeout")]),v._v("、"),e("code",[v._v("setInterval")]),v._v("、 "),e("code",[v._v("setImmediate")]),v._v("、"),e("code",[v._v("script（整体代码）")]),v._v("、 "),e("code",[v._v("I/O")]),v._v("操作等。")]),v._v(" "),e("li",[v._v("常见的micro-task："),e("code",[v._v("process.nextTick")]),v._v("、"),e("code",[v._v("new Promise().then")]),v._v("(回调)等。")])]),v._v(" "),e("p",[v._v("但是我们要注意有一个很容易混淆的点")]),v._v(" "),e("ul",[e("li",[v._v("宏任务队列和微任务队列都只是概念，在node当中没有说哪个具体队列名字就叫做宏任务队列，正确的认知应该是前面我们说的事件循环当中的6个阶段对应的6个基本的队列都属于宏队列")]),v._v(" "),e("li",[v._v("比如"),e("code",[v._v("timer")]),v._v("阶段对应的是"),e("code",[v._v("timer宏队列")]),v._v("，"),e("code",[v._v("I/O callback")]),v._v("阶段对应的就是"),e("code",[v._v("I/O callback宏队列")]),v._v(",依次类推。")])]),v._v(" "),e("p",[v._v("所以事件循环当中的6个宏队列和微队列的关系如下：微队列（microtask）在事件循环的各个阶段之间执行，或者说在事件循环的各个阶段对应的宏队列（macrotask）之间执行 "),e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3061147-49519bff4bde6b65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"node队列"}})]),v._v(" "),e("p",[v._v("但是这里又有一个特别容易混淆的版本改变：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("如果是node10及其之前版本：")]),v._v("宏队列当中的有几个宏任务，是要等到宏队列当中的所有宏任务全部执行完毕才会去执行微队列当中的微任务")]),v._v(" "),e("li",[e("code",[v._v("如果是node11版本：")]),v._v("一旦执行一个阶段里对应宏队列当中的一个宏任务(setTimeout,setInterval和setImmediate三者其中之一，不包括I/O)就立刻执行微任务队列，执行完微队列当中的所有微任务再回到刚才的宏队列执行下一个宏任务。")])]),v._v(" "),e("p",[v._v("所以下面我们给出的所有实例我们都会给出不同版本"),e("code",[v._v("node")]),v._v("执行的结果。")]),v._v(" "),e("h2",{attrs:{id:"process-nexttick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick"}},[v._v("#")]),v._v(" process.nextTick")]),v._v(" "),e("p",[v._v("这个函数其实是独立于"),e("code",[v._v("Event Loop")]),v._v("之外的，它有一个自己的队列，当每个阶段完成后，如果存在"),e("code",[v._v("nextTick")]),v._v("队列，就会清空队列中的所有回调函数，并且优先于其他"),e("code",[v._v("microtask")]),v._v("执行。")]),v._v(" "),e("ul",[e("li",[v._v("执行机制："),e("code",[v._v("process.nextTick")]),v._v("是用于在事件循环的下一次循环中调用回调函数的，将一个函数推迟到代码执行的下一个同步方法执行完毕，或异步事件回调函数开始执行时再执行")]),v._v(" "),e("li",[v._v("执行原理："),e("code",[v._v("Node")]),v._v("每一次循环都是一个"),e("code",[v._v("tick")]),v._v("，每次"),e("code",[v._v("tick")]),v._v("，"),e("code",[v._v("Chrome V8")]),v._v("都会从时间队列当中取所有事件依次处理。遇到"),e("code",[v._v("nextTick")]),v._v("事件，将其加入事件队尾，等待下一次"),e("code",[v._v("tick")]),v._v("到来的时候执行。")])]),v._v(" "),e("p",[v._v("#了不起的Node.js")]),v._v(" "),e("h3",{attrs:{id:"_1-前后端分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-前后端分离"}},[v._v("#")]),v._v(" 1. 前后端分离")]),v._v(" "),e("p",[v._v("绝大多数开发都是从单体式架构开始的，简单集成度高，上手十分容易，但是在团队协作重度化的今天，多人协作势必会导致专业化分工，前后端分离也伴随而来，典型的企业应用会采用三层架构模式：")]),v._v(" "),e("ul",[e("li",[v._v("表现层：处理"),e("code",[v._v("HTTP")]),v._v("请求，直接返回"),e("code",[v._v("HTML")]),v._v("渲染，或者返回"),e("code",[v._v("API")]),v._v("结果，对于复杂的应用系统，表面层通常是代码中比较重要的部分")]),v._v(" "),e("li",[v._v("业务逻辑层：完成具体的业务逻辑，是应用的核心组成部分")]),v._v(" "),e("li",[v._v("数据访问层：访问基础数据，例如数据库，缓存和消息队列")])]),v._v(" "),e("p",[v._v("按照传统的分类方式，表现层就是前端，业务逻辑层和数据访问层都属于后端，而且现在重度API化的今天，后端业务逻辑被削弱了，更多业务逻辑可以被移到前端，比如说：组装API、RPC服务、提供配置、静态API接口等等，除了不直接操作数据库，前端都能承担。当前最常见的模式就是：前端 + API + 后端服务，如下所示：")]),v._v(" "),e("ul",[e("li",[e("em",[v._v("用户客户端 -> 请求 -> Nginx -> node(前端Vue/React) <- (json<-)静态API(->Ajax) -> 后端服务（node、java、Go）")])])]),v._v(" "),e("p",[v._v("而上述为什么把前端"),e("code",[v._v("Vue/React")]),v._v("也列举为"),e("code",[v._v("node")]),v._v("呢，因为本质是使用"),e("code",[v._v("node")]),v._v("启动的服务，而单页面应用也是页面即服务的典型应用。")]),v._v(" "),e("h2",{attrs:{id:"_2-web工程化开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-web工程化开发"}},[v._v("#")]),v._v(" 2. Web工程化开发")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("编号")]),v._v(" "),e("th",[v._v("分类")]),v._v(" "),e("th",[v._v("举例")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("1")]),v._v(" "),e("td",[v._v("压缩")]),v._v(" "),e("td",[v._v("UglifyJS JSmin CSSO")])]),v._v(" "),e("tr",[e("td",[v._v("2")]),v._v(" "),e("td",[v._v("依赖管理")]),v._v(" "),e("td",[v._v("npm Bower")])]),v._v(" "),e("tr",[e("td",[v._v("3")]),v._v(" "),e("td",[v._v("模块系统")]),v._v(" "),e("td",[v._v("CommonJS AMD ES6module")])]),v._v(" "),e("tr",[e("td",[v._v("4")]),v._v(" "),e("td",[v._v("模块加载器")]),v._v(" "),e("td",[v._v("Require.js jspm Sea.js System.js")])]),v._v(" "),e("tr",[e("td",[v._v("5")]),v._v(" "),e("td",[v._v("模块打包器")]),v._v(" "),e("td",[v._v("Browerify Webpack")])]),v._v(" "),e("tr",[e("td",[v._v("6")]),v._v(" "),e("td",[v._v("css预处理器")]),v._v(" "),e("td",[v._v("PostCss Less Sass stylus")])]),v._v(" "),e("tr",[e("td",[v._v("7")]),v._v(" "),e("td",[v._v("构建工具")]),v._v(" "),e("td",[v._v("Grunt Gulp")])]),v._v(" "),e("tr",[e("td",[v._v("8")]),v._v(" "),e("td",[v._v("引擎模板")]),v._v(" "),e("td",[v._v("Jade Handlebars Numjucks")])]),v._v(" "),e("tr",[e("td",[v._v("9")]),v._v(" "),e("td",[v._v("JavaScript友好语言")]),v._v(" "),e("td",[v._v("CoffeeScipt Babel Typescript")])]),v._v(" "),e("tr",[e("td",[v._v("10")]),v._v(" "),e("td",[v._v("跨平台打包工具")]),v._v(" "),e("td",[v._v("Electron NW.js cordova")])]),v._v(" "),e("tr",[e("td",[v._v("11")]),v._v(" "),e("td",[v._v("生成器")]),v._v(" "),e("td",[v._v("yeoman Slush vue-cli create-react-app")])])])]),v._v(" "),e("h3",{attrs:{id:"_3-后端开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-后端开发"}},[v._v("#")]),v._v(" 3. 后端开发")]),v._v(" "),e("p",[e("strong",[v._v("① API 代理（API 网关）")]),v._v("\n一般后端开发指的是"),e("code",[v._v("Web")]),v._v("应用开发当中和视图渲染无关的部分，主要是以数据库交互为主的重业务逻辑处理，但是架构升级之后，"),e("code",[v._v("Node")]),v._v("承担了前后端分离的重任，就有了更多的玩法：")]),v._v(" "),e("ul",[e("li",[v._v("面向API的接口应用（当前）")]),v._v(" "),e("li",[v._v("通过RPC调用封装对数据库进行操作（（当前和未来））")]),v._v(" "),e("li",[v._v("提供前端API代理（API Gateway）和网关，服务组装等 （当前和未来）")])]),v._v(" "),e("p",[v._v("面向接口的开发应用中如果时间过长或者项目太过复杂的时候就会产生下面的问题：")]),v._v(" "),e("ul",[e("li",[v._v("一个页面的"),e("code",[v._v("API")]),v._v("非常多")]),v._v(" "),e("li",[v._v("跨域")]),v._v(" "),e("li",[e("code",[v._v("API")]),v._v("返回的数据对前端不太友好")]),v._v(" "),e("li",[v._v("需求临时决定需要一个"),e("code",[v._v("API")]),v._v(",但是"),e("code",[v._v("API")]),v._v("无法及时反馈")])]),v._v(" "),e("p",[v._v("所以我们就会想：在包含多种交互的情况下。理想的情况是使用一样的模型，提供基于模型的定制"),e("code",[v._v("API")]),v._v(",在"),e("code",[v._v("Node")]),v._v("层提供统一的模型，然后包装成前端需要的"),e("code",[v._v("API")]),v._v(",这样的"),e("code",[v._v("API")]),v._v("是对前端友好的，所以就出现了"),e("code",[v._v("单节点API网关（API Gateway）")]),v._v("和"),e("code",[v._v("BFF网关（Node中间层）")]),v._v("。")]),v._v(" "),e("p",[v._v("这种API Proxy位于异构API（可能是RESTful API、可能是RPC服务）之前，通过对异构API进行抽象，形成模型层，然后根据各种前端的需求，包装成为对前端友好的API接口")]),v._v(" "),e("p",[e("strong",[v._v("② 服务组装")])]),v._v(" "),e("p",[v._v("在微服务架构十分流行的今天，服务化可谓是最佳实践，应用非常多的便是基于"),e("code",[v._v("TCP")]),v._v("的"),e("code",[v._v("RPC")]),v._v("服务，相比较"),e("code",[v._v("HTTP")]),v._v("来说效率更高，在结合配置中心，服务注册等，更好的对系统进行解耦，那么复杂的跨服务业务怎么处理，这个时候就需要对服务进行组装。而组装服务的过程也可以在"),e("code",[v._v("API Proxy")]),v._v("层进行实现：")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3061147-1bac38a9831ea680.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"服务组装"}})]),v._v(" "),e("p",[v._v("所以实际上服务组装的代价都一样，用"),e("code",[v._v("Node")]),v._v("为何不好呢？而且放在"),e("code",[v._v("Node Proxy")]),v._v("好处十分明显，既可以提高开发效率，又能让后端专注于服务开发，如果前端团队十分强大，可以组件一个"),e("code",[v._v("API")]),v._v("小组，从事服务集成的工作。")]),v._v(" "),e("h2",{attrs:{id:"微服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[v._v("#")]),v._v(" 微服务")]),v._v(" "),e("p",[v._v("微服务本身不是什么新技术，只是随着业务的不断发展，对业务不断分层，不断拆分。")]),v._v(" "),e("blockquote",[e("p",[v._v("微服务是系统或应用程序中的自包含独立组件。每个微服务都应该有明确的作用域和责任，理想情况下，一个微服务只做一件事。它应该是无状态的或有状态的，如果它是有状态的，它应该带有自己的持久层（即数据库），不与其他服务共享。软件开发团队基于微服务架构以更分散的方式开发可重用的独立组件。他们可以为每个微服务使用自定义框架、依赖关系集，甚至是完全不同的编程语言。微服务也有助于实现可扩展性，因为它们本质上是分布式的，并且每个微服务都可以独立增长或复制。")])]),v._v(" "),e("h3",{attrs:{id:"容器与微服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器与微服务"}},[v._v("#")]),v._v(" 容器与微服务")]),v._v(" "),e("p",[v._v("当我们在谈论定义时，需要注意的是微服务和容器其实是不一样的东西，但这两个概念经常被放在一起谈论，就像API和微服务一样。如果没有容器，要么把服务器配置成可以运行多个微服务，让这些微服务不可避免地相互产生负面干扰，要么每个微服务都需要一个单独的服务器或自己的虚拟机，导致不必要的开销。因此，微服务通常被部署在一组由容器集群软件（如 Kubernetes）管理的一组容器中。可以肯定地说，容器和微服务的崛起其实是相互影响、相互促进的结果。")]),v._v(" "),e("p",[e("code",[v._v("网关")]),v._v("说白了就是暴露给外网的一套API接口，或者说门神，然后网关再去调用一个一个微服务，而关于服务器有关的限流，熔断，负载均衡都能在网关这里去做，也是防止一个服务导致整个项目奔溃的解决方案。")])])}),[],!1,null,null,null);_.default=o.exports}}]);